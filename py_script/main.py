import serial
import io
import time
import csv
import pandas as pd
import matplotlib
matplotlib.use('agg')
import matplotlib.pyplot as plt


portpath = "/dev/ttyACM0"
baudrate = 9600
timeout = 5
filename = "data.csv"


def make_serial_obj(portpath, baudrate, tout):
	"""
	Creates a serial link, given the path to the board, the baudrate,
	and the timeout length in seconds.
	"""
	return serial.Serial(portpath, baudrate, timeout = tout)


def read_data(serial):
	"""
	Sends the data command over serial, then takes the data and stores it in
	an array in Python. One serial line per array entry.
	"""
	serial.flushInput()	

	serial_data = []
	still_reading = True
	
	send("data", serial)
	time.sleep(1)
	
	while still_reading:

		cur_line = serial.readline().decode('utf-8')

		if "NOK" in cur_line:
			still_reading = False
			print("Error")
		elif "OK" in cur_line:
			still_reading = False
			print("Finished Reading")
		else:
			serial_data.append(cur_line)
	
	return serial_data


def print_serial(serial):
	"""
	Prints (in Python) everything that is being sent over the serial line.
	"""
	for line in serial.readlines() : print(line.decode('utf-8'))


def clean_data(serial, dirty_data):
	"""
	UNFINISHED
	This will take the data array generated by read_data, and clean it for eventual
	use in a pandas dataframe. Currently unfinished.
	"""
	clean_data = [line for line in dirty_data if "D" in line[1]]
	clean_data = [line[3:-1] for line in clean_data] 
	clean_data = [line.split(",") for line in clean_data]	

	return clean_data


def log_dump(serial):
	"""
	Writes the log from the board to a text file called log.txt, will make this have a 
	unique name eventually.
	"""
	serial.flushInput()
	
	log_file = open("log.txt", "w+") # make this use the hash for light sensor as title later
	still_reading = True
	
	send("log", serial)
	time.sleep(1)
	
	while still_reading:

		cur_line = serial.readline().decode('utf-8')

		if "NOK" in cur_line:
			still_reading = False
			print("Error")
		elif "OK" in cur_line:
			still_reading = False
			print("Finished Log Dump")
		else:
			log_file.write("%s\n\r" % cur_line)

	log_file.close()


def data_dump(serial):
	serial.flushInput()	

	data_file = open("data.txt", "w+")
	serial_data = []
	still_reading = True
	
	send("data", serial)
	time.sleep(1)
	
	while still_reading:

		cur_line = serial.readline().decode('utf-8')

		if "NOK" in cur_line:
			still_reading = False
			print("Error")
		elif "OK" in cur_line:
			still_reading = False
			print("Finished Reading")
		else:
			data_file.write("%s" % cur_line)

	
	data_file.close()


def send(string, serial):
	"""
	Sends commands (or any string) to the light sensor via serial.
	"""
	for char in string:
		serial.write(str(char).encode('utf-8'))
		time.sleep(0.2)
	serial.write(str("\n").encode('utf-8'))


def set_current_datetime(serial):
	"""
	Pulls the current date and time and sets it on the light sensor board.
	"""
	cur_time = time.localtime()
	date_code = "ds,{},{},{}".format(cur_time[1], cur_time[2], cur_time[0] % 100)
	time_code = "ts,{},{},{}".format(cur_time[3], cur_time[4], cur_time[5])
	send(time_code, serial)
	send(date_code, serial)


def save_to_csv(data, filename):
	"""
	UNFINISHED
	Will be used to write the cleaned data to a csv file.
	"""
	with open(filename, 'wb') as csvfile:
		csvwrite = csv.writer(csvfile)
		csvwrite.writerows(data)

#def clean_data(data):
"""
This should take in the array generated by read_data and format it for actual use.
Probably going to use Pandas.
"""	


"""
Example script that sets the date and time as well as dumping the log to a text file.
"""

print("Creating serial link...")
ser = make_serial_obj(portpath, baudrate, timeout)

#print("Setting current date...")
#set_current_datetime(ser)
#print_serial(ser)

print("Reading Data")
dirty_data = read_data(ser)

clean_data = clean_data(ser, dirty_data)

for line in clean_data:
	print(line)


