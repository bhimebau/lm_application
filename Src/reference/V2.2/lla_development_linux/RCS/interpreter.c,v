head	1.5;
access;
symbols;
locks
	bhimebau:1.5; strict;
comment	@ * @;


1.5
date	2006.03.06.19.09.17;	author bhimebau;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.06.14.49.18;	author bhimebau;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.03.21.55.06;	author bhimebau;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.03.16.26.45;	author bhimebau;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.28.15.21.12;	author bhimebau;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Added execute phase once valid command is located.
@
text
@/* interpreter.c --- 
 * 
 * Filename: interpreter.c
 * Description: 
 * Author: Bryce Himebaugh
 * Maintainer: 
 * Created: Tue Feb 28 08:55:30 2006
 * Version: 
 * Last-Updated: 
 *           By: 
 *     Update #: 0
 * Keywords: 
 * Compatibility: 
 * 
 */

/* Commentary: 
 * 
 * 
 * 
 */

/* Change log:
 * 
 * 
 */

/* This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING.  If not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

/* Code: */
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "ueac.h"
#include "interpreter.h"

// String Constants 
const char DELIMITER[]=",";
const char TERMINATOR[]="\n";
const char R[]="R";
const char W[]="W";
const char P[]="P";
const char V[]="V";
const char I[]="I";
const char GRID_NUM_MIN[]="1";
const char GRID_NUM_MAX[]="5";

int delspace(char *instr,char *outstr) {
  int length=0;
  while (*instr!='\0') {
    if (*instr!=' ') {
      *outstr=*instr;
      outstr++;
      length++;
    }
    instr++;
  }
  *outstr='\0';
  return length;
}

// Takes a newline delimited string and modifies the ueac's system state
int interpreter (char *command_string,ueac_t *system_state) {
  enum {COMMAND,SPECIFIER,F3,F4,F5,F6,F7,F8,F9,F10};           // field states
  enum {R_PRIMITIVE,W_PRIMITIVE,PRINTGRID,LLA_INSTANTIATION,LLA_TABLE,GLOBAL_CONTROL};  // instruction type
  enum {NOT_DONE,DONE,FAILED};

  char *token = NULL;
  unsigned char error_code = 0;
  int field = COMMAND;                                    // State variable to indicated which delimited 
  int type = R_PRIMITIVE;                                 // State varible to indicate the context of the field
  char *strptr=NULL;
  char tokbuf[20];                                        // field buffer used to strip spaces from the input
  int command_complete = NOT_DONE;                        // Variable to indicate if the command string has an issue 
  int value_temp=0;

  while (system_state->instruction.command_reg==UEAC_EXECUTE); // wait while the last command completes

  token = strtok(command_string,DELIMITER);               // grab the next token and pass it to the field parser  
  while ((token!=NULL)&&(command_complete!=FAILED)) {     // stop when strtok returns NULL or parsing fails
    delspace(token,tokbuf);                               // strip any spaces from the field token
    switch (field) {
    // Parse the individual fields
    case COMMAND:   
      if (!strncasecmp(tokbuf,R,sizeof(R))) {
        type = R_PRIMITIVE;
      }
      else if (!strncasecmp(tokbuf,W,sizeof(W))) {
        type = W_PRIMITIVE;
      }
      else if (!strncasecmp(tokbuf,P,sizeof(P))) {
        type = PRINTGRID;
      }
      else {
        command_complete=FAILED;
      }
      field=SPECIFIER;
      break;
    case SPECIFIER:
      switch (type) {
        // Parse field based on specifics of the particular command type
      case R_PRIMITIVE:
        if (!strncasecmp(tokbuf,V,sizeof(V))) {
          system_state->instruction.instruction_type=UEAC_READ_V;
          field = F3;
        }
        else if (!strncasecmp(tokbuf,I,sizeof(I))) {
          system_state->instruction.instruction_type=UEAC_READ_I;
          field = F3;
        }
        else {
          command_complete=FAILED;
        }
        break;
      case W_PRIMITIVE:
        if (!strncasecmp(tokbuf,I,sizeof(I))) {
          system_state->instruction.instruction_type=UEAC_WRITE;
          field = F3;
        }
        else {
          command_complete=FAILED;
        }
        break;
      case PRINTGRID:
        if ((strptr=strchr(tokbuf,'\n'))==NULL) {
          // newline not found which is an error in this field. 
          command_complete=FAILED;
          break;
        }
        else {
          *strptr=0; // since newline found, strip it from tokbuf for V/I match
        }
        // Parse the field now that the newline has been located
        if (!strncasecmp(tokbuf,V,sizeof(V))) {
          system_state->instruction.instruction_type=UEAC_ALL_V;
          command_complete=DONE;
        }
        else if (!strncasecmp(tokbuf,I,sizeof(I))) {
          system_state->instruction.instruction_type=UEAC_ALL_I;
          command_complete=DONE;
        }
        else {
         command_complete=FAILED;
        }
        break;
      }
      break;
    case F3:
      switch (type) {
      case R_PRIMITIVE:
      case W_PRIMITIVE:  
        // For RW this should be the X location
        if (strlen(tokbuf)!=1) {
          command_complete=FAILED;
        }
        else {
          if ((strncasecmp(tokbuf,GRID_NUM_MIN,sizeof(GRID_NUM_MIN))>=0) && \
              (strncasecmp(tokbuf,GRID_NUM_MAX,sizeof(GRID_NUM_MIN))<=0)) {
            system_state->instruction.pin_x=(unsigned char) atoi(tokbuf);
            field=F4;
          }
          else {
            command_complete=FAILED;
          }
        }
        break;
      }
      break;
    case F4:
      switch (type) {
      case R_PRIMITIVE:
      case W_PRIMITIVE:
        // For RW this should be the Y location
        if (strlen(tokbuf)!=1) {
          command_complete=FAILED;
        }
        else {
          if ((strncasecmp(tokbuf,GRID_NUM_MIN,sizeof(GRID_NUM_MIN))>=0) && \
              (strncasecmp(tokbuf,GRID_NUM_MAX,sizeof(GRID_NUM_MIN))<=0)) {
            system_state->instruction.pin_y=(unsigned char) atoi(tokbuf);
            field=F5;
          }
          else {
            command_complete=FAILED;
          }
        }
        break;
      }
      break;
    case F5:
      switch (type) {
      case R_PRIMITIVE:
      case W_PRIMITIVE:
        // For RW this should be the value field
        if ((strptr=strchr(tokbuf,'\n'))==NULL) {
          command_complete=FAILED; // lack of newline is an error in this field. 
          break;
        }
        else {
          *strptr=0; // since newline found, strip it from tokbuf for V/I match
        }
        if (strlen(tokbuf)==0) {
          command_complete=FAILED; // empty value field is an error
        }
        else {
          value_temp=atoi(tokbuf);
          if ((value_temp>W_VALUE_MAX)||(value_temp<W_VALUE_MIN)) {
            command_complete=FAILED; // empty value field is an error
          }
          else {
            system_state->instruction.value=(unsigned short) value_temp;
            command_complete=DONE;
          }
        }
        break;
      }
      break;
    case F6:
      if (!strncasecmp(tokbuf,TERMINATOR,sizeof(TERMINATOR))) {
        printf("Found Terminator\n");
      }
      else {
        printf("F6 %s\n",tokbuf);
      }
      field=F7;
      break;
    case F7:
      if (!strncasecmp(tokbuf,TERMINATOR,sizeof(TERMINATOR))) {
        printf("Found Terminator\n");
      }
      else {
        printf("F7 %s\n",tokbuf);
      }
      field=F8;
      break;
    case F8:
      if (!strncasecmp(tokbuf,TERMINATOR,sizeof(TERMINATOR))) {
        printf("Found Terminator\n");
      }
      else {
        printf("F8 %s\n",tokbuf);
      }
      field=F9;
      break;
    case F9:
      if (!strncasecmp(tokbuf,TERMINATOR,sizeof(TERMINATOR))) {
        printf("Found Terminator\n");
      }
      else {
        printf("F9 %s\n",tokbuf);
      }
      field=F10;
      break;
    case F10:
      if (!strncasecmp(tokbuf,TERMINATOR,sizeof(TERMINATOR))) {
        printf("Found Terminator\n");
      }
      else {
        printf("F10 %s\n",tokbuf);
      }
      break;
    }
    token = strtok(NULL,DELIMITER);  // get the next token 
  }
  if (command_complete==DONE) {
    system_state->instruction.command_reg=UEAC_EXECUTE;
    ueac_execute_instruction(system_state);
    while (system_state->instruction.command_reg==UEAC_EXECUTE); // wait while the last command completes
    printf("OK\n");
  }
  else {
    printf("NOK\n");
  }
  return error_code;
}

/* interpreter.c ends here */

@


1.4
log
@Added range checking to the Write Current block.
@
text
@d84 2
a85 2
  int field = COMMAND;
  int type = R_PRIMITIVE;
d88 1
a88 1
  int command_complete = NOT_DONE;
d91 2
d94 2
a95 2
  while ((token!=NULL)&&(command_complete!=FAILED)) {                                   // stop when strtok returns NULL 
    delspace(token,tokbuf);                               // strip any spaces from the token
a99 1
        printf("READ->");
a102 1
        printf("WRITE->");
a105 1
        printf("P.ALL->");
d118 1
a118 1
          printf("V->");
d122 1
a122 1
          printf("I->");
d131 1
a131 1
          printf("I->");
d149 1
a149 1
          printf("V ");
d153 1
a153 1
          printf("I ");
d173 1
a173 1
            printf("%d->",atoi(tokbuf));
d194 1
a194 1
            printf("%d->",atoi(tokbuf));
d225 1
a225 1
            printf("%d ",value_temp);
d280 3
@


1.3
log
@rwp implemented, but no bounds check for value yet.
@
text
@d89 1
d211 1
a211 2
          // newline not found which is an error in this field. 
          command_complete=FAILED;
d218 1
a218 1
          command_complete=FAILED;
d221 8
a228 2
          printf("%d ",atoi(tokbuf));
          command_complete=DONE;
@


1.2
log
@Implemented printall for v and i. Partial implementation of pin RW
commands.
@
text
@d62 14
d78 3
a80 2
  enum {COMMAND,SPECIFIER,F3,F4,F5,F6,F7,F8,F9,F10,COMMAND_ERROR};           // field states
  enum {RW_PRIMITIVE,PRINTGRID,LLA_INSTANTIATION,LLA_TABLE,GLOBAL_CONTROL};  // instruction type
d85 1
a85 1
  int type = RW_PRIMITIVE;
d87 6
a92 3
 
  token = strtok(command_string,DELIMITER);
  while (token!=NULL) {
d94 9
a102 8
    case COMMAND:
      if (!strncasecmp(token,R,sizeof(R))) {
        printf("read mode\n");
        type = RW_PRIMITIVE;
      }
      else if (!strncasecmp(token,W,sizeof(W))) {
        printf("write mode\n");
        type = RW_PRIMITIVE;
d104 2
a105 2
      else if (!strncasecmp(token,P,sizeof(P))) {
        printf("print grid all mode\n");
d109 1
a109 2
        printf("Error - unknown command field -> %s",token);
        type = COMMAND_ERROR;
d115 4
a118 3
      case RW_PRIMITIVE:
        if (!strncasecmp(token,V,sizeof(V))) {
          printf("voltage\n");
d121 11
a131 2
        else if (!strncasecmp(token,I,sizeof(I))) {
          printf("current\n");
d135 1
a135 2
          printf("Error - unknown specifier field -> %s",token);
          field=COMMAND_ERROR;
d139 1
a139 1
        if ((strptr=strchr(token,'\n'))==NULL) {
d141 1
a141 2
          printf("newline not found\n");
          field=COMMAND_ERROR;
d145 1
a145 1
          *strptr=0; // since newline found, strip it from token for V/I match
d148 3
a150 3
        if (!strncasecmp(token,V,sizeof(V))) {
          printf("Stream voltage\n");
          field = COMMAND;
d152 3
a154 3
        else if (!strncasecmp(token,I,sizeof(I))) {
          printf("Stream current\n");
          field = COMMAND;
d157 1
a157 2
          printf("Error - unknown specifier field -> %s",token);
          field = COMMAND_ERROR;
d164 2
a165 1
      case RW_PRIMITIVE:
d167 2
a168 4
        if ((strncasecmp(token,GRID_NUM_MIN,sizeof(GRID_NUM_MIN))>=0) && \
            (strncasecmp(token,GRID_NUM_MAX,sizeof(GRID_NUM_MIN))<=0)) {
          printf("x=%d\n",atoi(token));
          field=F4;
d171 8
a178 2
          printf("X Value out of range\n");
          field=COMMAND_ERROR;
d181 9
a189 5
      case PRINTGRID:
        
        if (!strncasecmp(token,TERMINATOR,sizeof(TERMINATOR))) {
          printf("Execute Stream Command\n");
          field=COMMAND;
d192 8
a199 2
          printf("Error - Improper Format in Printall command -> %s\n",token);
          field = COMMAND_ERROR;
d204 1
a204 1
    case F4:
d206 13
a218 6
      case RW_PRIMITIVE:
        // For RW this should be the X location
        if ((strncasecmp(token,GRID_NUM_MIN,sizeof(GRID_NUM_MIN))>=0) && \
            (strncasecmp(token,GRID_NUM_MAX,sizeof(GRID_NUM_MIN))<=0)) {
          printf("y=%d\n",atoi(token));
          field=F5;
d221 2
a222 2
          printf("Y Value out of range\n");
          field = COMMAND_ERROR;
a226 9
    case F5:
      if (!strncasecmp(token,TERMINATOR,sizeof(TERMINATOR))) {
        printf("Found Terminator\n");
      }
      else {
        printf("F5 %s\n",token);
      }
      field=F6;
      break;
d228 1
a228 1
      if (!strncasecmp(token,TERMINATOR,sizeof(TERMINATOR))) {
d232 1
a232 1
        printf("F6 %s\n",token);
d237 1
a237 1
      if (!strncasecmp(token,TERMINATOR,sizeof(TERMINATOR))) {
d241 1
a241 1
        printf("F7 %s\n",token);
d246 1
a246 1
      if (!strncasecmp(token,TERMINATOR,sizeof(TERMINATOR))) {
d250 1
a250 1
        printf("F8 %s\n",token);
d255 1
a255 1
      if (!strncasecmp(token,TERMINATOR,sizeof(TERMINATOR))) {
d259 1
a259 1
        printf("F9 %s\n",token);
d264 1
a264 1
      if (!strncasecmp(token,TERMINATOR,sizeof(TERMINATOR))) {
d268 1
a268 10
        printf("F10 %s\n",token);
      }
      break;
    case COMMAND_ERROR:
      if (!strncasecmp(token,TERMINATOR,sizeof(TERMINATOR))) {
        printf("Found Terminator in COMMAND_ERROR state ! \n");
        field=COMMAND;
      }
      else {
        printf("Waiting in COMMAND_ERROR state for a newline\n");
d274 6
@


1.1
log
@Initial revision
@
text
@d47 19
a66 4
int interpreter (void) {
  char in_string[]="a,b,c,d,e";
  char target[]="B";
  const char *delimiter=",";
d68 6
a73 2

  token = strtok(in_string,delimiter);
d75 167
a241 2
    if (!strncasecmp(token,target,3)) {
      printf("found target ");
d243 1
a243 2
    printf("%s\n",token);
    token = strtok(NULL,delimiter);
d245 1
a245 1
  return 0;
@
